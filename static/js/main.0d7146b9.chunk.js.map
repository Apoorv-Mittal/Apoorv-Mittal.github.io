{"version":3,"sources":["myPhoto.jpg","Components/Resume.pdf","Components/Background.js","Components/FrontPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","canvas","cx","frameID","INCREMENT","MULTIPLIER","MODULUS","Math","pow","stepX","stepY","sizeX","sizeY","marginTop","marginBottom","marginLeft","marginRight","random","seed","arguments","length","undefined","currentSeed","reset","newSeed","get","x","c","lcg","createRandom","frame","frameTime","clearRect","width","height","y","randomValue","distX","distY","phase","PI","fillStyle","fillRect","sin","cos","window","requestAnimationFrame","resize","clientWidth","clientHeight","FrontPage","this","refs","console","log","getContext","addEventListener","dispatchEvent","Event","cancelAnimationFrame","react_default","a","createElement","Fragment","ref","className","Container_default","src","logo","alt","href","resume","target","rel","Component","App","Route","exact","path","render","routerProps","Components_FrontPage","Boolean","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6JCApCC,EACAC,EAgBAC,yJAdEC,EAAY,MACZC,EAAa,WACbC,EAAUC,KAAKC,IAAI,EAAG,IAGtBC,EAAQ,GACRC,EAAQ,GACRC,EAAQ,EACRC,EAAQ,EACRC,EAAY,GACZC,EAAe,GACfC,EAAa,GACbC,EAAc,GAwBpB,IAAMC,EAhBN,WAAuC,IACjCC,EADiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAElC,MAAO,CACLG,kBACE,OAAOJ,GAETK,MAJK,SAICC,GACJN,EAAOM,GAETC,IAPK,WASH,OADAP,EAdN,SAAaQ,GAA+C,IAA5CC,EAA4CR,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxCf,EAClB,QAD0De,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBd,GACrBqB,EAAIC,IAD0CR,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAATb,GActCsB,CAAIV,IACGZ,IAKLuB,GAEf,SAASC,EAAMC,GAEb7B,EAAG8B,UAAU,EAAE,EAAE9B,EAAGD,OAAOgC,MAAM/B,EAAGD,OAAOiC,QAC3C,IAAK,IAAIC,EAAItB,EAAWsB,EAAIjC,EAAGD,OAAOiC,OAASpB,EAAcqB,GAAKzB,EAAO,CACvEO,EAAOM,MAAMY,GACb,IAAK,IAAIT,EAAIX,EAAYW,EAAIxB,EAAGD,OAAOgC,MAAQjB,EAAaU,GAAKjB,EAAO,CACtE,IAAM2B,EAAcnB,EAAOQ,MACrBY,EAAsB,GAAdD,EACRE,EAAsB,GAAdF,EACRG,EAAQH,EAAc7B,KAAKiC,GAAK,EACtCtC,EAAGuC,UAAY,OACfvC,EAAGwC,SACDhB,EACAS,EACAxB,EAAQJ,KAAKoC,IAAIJ,EAAQR,EAAY,KAAQM,EAC7CzB,EAAQL,KAAKqC,IAAIL,EAAQR,EAAY,KAAQO,IAInDnC,EAAU0C,OAAOC,sBAAsBhB,GAGzC,SAASiB,IACP9C,EAAOgC,MAAQhC,EAAO+C,YACtB/C,EAAOiC,OAASjC,EAAOgD,iBCTVC,8LA5CX,IAAIjD,EAASkD,KAAKC,KAAKnD,OACvBoD,QAAQC,IAAIrD,GDyDdC,GADAD,ECvDQA,GDwDIsD,WAAW,MACvBV,OAAOW,iBAAiB,SAAUT,GAClCF,OAAOY,cAAc,IAAIC,MAAM,WAE/BvD,EAAU0C,OAAOC,sBAAsBhB,kDAIrC6B,qBAAqBxD,oCCvDrB,OAEEyD,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KAEEH,EAAAC,EAAAC,cAAA,UAAQE,IAAI,SAASC,UAAU,eAE/BL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAWI,UAAU,cACnBL,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAMH,UAAU,MAAMI,IAAI,WACpCT,EAAAC,EAAAC,cAAA,qDAGAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGQ,KAAQC,KACTX,EAAAC,EAAAC,cAAA,KAAGG,UAAU,4BAEfL,EAAAC,EAAAC,cAAA,KAAGQ,KAAM,mCAAmCE,OAAO,SAASC,IAAI,uBAC9Db,EAAAC,EAAAC,cAAA,KAAGG,UAAU,wBAEfL,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,6CAA6CE,OAAO,SAASC,IAAI,uBACvEb,EAAAC,EAAAC,cAAA,KAAGG,UAAU,oCAjCHS,aCSTC,0LATX,OACEf,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAWI,UAAU,OACnBL,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,IAAOC,OAAS,SAACC,GAAD,OAAiBpB,EAAAC,EAAAC,cAAEmB,EAAF,iBAJxCP,cCKEQ,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OAAOnB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAQC,SAAUC,IAAwB7B,EAAAC,EAAAC,cAAC4B,EAAD,OAAkBC,SAASC,eAAe,SD0H9F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0d7146b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/myPhoto.f7ecf73d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Resume.0353d42a.pdf\";","let canvas \nlet cx\n\nconst INCREMENT = 12345\n    , MULTIPLIER = 1103515245\n    , MODULUS = Math.pow(2, 31)\n\n// Todo esto son inputs del nodo generador\nconst stepX = 16\n    , stepY = 16\n    , sizeX = 1\n    , sizeY = 1\n    , marginTop = 32\n    , marginBottom = 32\n    , marginLeft = 32\n    , marginRight = 32\n\nlet frameID\n\nfunction lcg(x, c = INCREMENT, a = MULTIPLIER, m = MODULUS) {\n  return (a * x + c) % m\n}\n\nfunction createRandom(initialSeed = 0) {\n  let seed = initialSeed\n  return {\n    get currentSeed() {\n      return seed\n    },\n    reset(newSeed) {\n      seed = newSeed\n    },\n    get() {\n      seed = lcg(seed)\n      return seed / MODULUS\n    }\n  }\n}\n\nconst random = createRandom()\n\nfunction frame(frameTime) {\n  // First element\n  cx.clearRect(0,0,cx.canvas.width,cx.canvas.height)\n  for (let y = marginTop; y < cx.canvas.height - marginBottom; y += stepY) {\n    random.reset(y)\n    for (let x = marginLeft; x < cx.canvas.width - marginRight; x += stepX) {\n      const randomValue = random.get()\n      const distX = randomValue * 16\n      const distY = randomValue * 16\n      const phase = randomValue * Math.PI * 2\n      cx.fillStyle = '#000'\n      cx.fillRect(\n        x, \n        y, \n        sizeX + Math.sin(phase + frameTime / 1000) * distX,\n        sizeY + Math.cos(phase + frameTime / 1000) * distY\n      )\n    }\n  }\n  frameID = window.requestAnimationFrame(frame)\n}\n\nfunction resize() {\n  canvas.width = canvas.clientWidth\n  canvas.height = canvas.clientHeight\n}\n\nfunction start(c) {\n  canvas = c;\n  cx = canvas.getContext('2d')\n  window.addEventListener('resize', resize)\n  window.dispatchEvent(new Event('resize'))\n  \n  frameID = window.requestAnimationFrame(frame)\n}\n\nfunction unmount(){\n    cancelAnimationFrame(frameID)\n}\nexport { start,unmount };","import React, { Component } from 'react';\nimport logo from '../myPhoto.jpg';\nimport 'font-awesome/css/font-awesome.min.css';\nimport Container from 'react-bootstrap/lib/Container';\nimport resume from './Resume.pdf'\nimport { start,unmount } from \"./Background\"\n\n\n\nclass FrontPage extends Component {\n\n  componentDidMount() {\n    let canvas = this.refs.canvas\n    console.log(canvas)\n    start(canvas)\n  }\n\n  componentWillUnmount() {\n    unmount()\n  }\n\n\n  render() {\n    return (\n      \n      <React.Fragment>\n        \n        <canvas ref=\"canvas\" className=\"background\"></canvas>\n        \n        <Container className=\"App-Inside\">\n          <img src={logo} className=\"Pic\" alt=\"Myself\" />\n          <p>\n            Building beautiful and awesome software!\n          </p>\n          <div>\n            <a href ={ resume } >\n              <i className=\"fa fa-file-pdf-o fa-2x\"></i>\n            </a>\n            <a href =\"https://github.com/Apoorv-Mittal\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <i className=\"fa fa-github fa-2x\"></i>\n            </a>\n            <a href=\"https://www.linkedin.com/in/apoorv-mittal/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <i className=\"fa fa-linkedin fa-2x\" ></i>\n            </a>\n          </div>\n        </Container>\n      </React.Fragment>\n        \n\n          \n        \n      \n    );\n  }\n}\n\nexport default FrontPage;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport FrontPage from './Components/FrontPage';\nimport Container from 'react-bootstrap/lib/Container';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container className=\"App\">\n        <Route exact path={`/`} render={ (routerProps) => < FrontPage/>} />\n      </Container>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}